func real Kappa(int modeNumber, real size1, real size2)
{
	return pi*(modeNumber-1)/size1;
}

func real H(real k, real kp) 
{
	return sqrt(k*k-kp*kp);
}
func complex anH(real xx, real yy, int modeNumber, int componentNumber, real size1, real size2, real k) 
{
	real kp = Kappa(abs(modeNumber), size1, 0);
	real h = H(k, kp);
	real sign = 0; if(modeNumber >= 0) sign = 1.; else sign = -1.;
	if(componentNumber == 3){
		return cos(kp*yy)*sqrt(k/h)*exp(1i*h*xx*sign);
	}
	return 0;
}

func complex anE(real xx, real yy, int modeNumber, int componentNumber, real size1, real size2, real k)
{
	real kp = Kappa(abs(modeNumber), size1, 0);
	real h = H(k, kp);	
	real sign = 0; if(modeNumber >= 0) sign = 1.; else sign = -1.; //если мода ноль, то знак всё равно надо менять, а таким образом не получится
	if(componentNumber == 3){
		return 0;
	}
	if(componentNumber == 2){
		return cos(kp*yy)*sqrt(h/k)*exp(1i*h*xx*sign)*sign;
	}	
	if(componentNumber == 1){
		return  kp*sin(kp*yy)/(1i*sqrt(k*h))*exp(1i*h*xx*sign);
	}	
	return 0*1i;
}

func real fNorm(int modeNumber, real size1)
{
	if(abs(modeNumber) == 1) return 2.*size1;
	else return  1.*size1;
}